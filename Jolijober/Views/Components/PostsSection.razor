
@using Jolijober.Views.Components
@using JolijoberProject.Main.Repository.Interfaces
@using JolijoberProject.Main.Repository.DataTransferObjects
@using JolijoberProject.Shared.SharedKernal.SharedDto
@using JolijoberProject.Shared.SharedKernal.ExtensionMethod
@using JolijoberProject.Shared.SharedKernal.EnumClass
@using Jolijober.Util.Translate
@using Jolijober.ViewModel
@using Microsoft.AspNetCore.SignalR.Client
@using  Microsoft.Extensions.Logging.Console

@inject IPostRepository _postRepository

@if (IsAction)
{
    <PostActionBar PostSubmit="PostAction" />

}
<div class="main-ws-sec">

    <div class="posts-section">

        @for (int i = BalanceFrom; i < BalanceTo; i++)
        {

            if (IsSlider && i == PostionSliderAfter + BalanceFrom)
            {
                <ProfilesSlider />
            }

            if (posts[i].PostType == PostTypes.Job)
            {
                <JobPost Post="posts[i]" />
            }
            else
            {
                <ProjectPost />
            }


        }

        @if (IsBounce)
        {
            <Bounce BounceClick="BalancePost" />
        }

    </div><!--posts-section end-->
</div>




@code {
    [Parameter] public bool IsSlider { get; set; } = false;
    [Parameter] public bool IsAction { get; set; } = false;
    [Parameter] public int PostionSliderAfter { get; set; } = 1;
    [Parameter] public bool IsJob { get; set; } = true;
    [Parameter] public bool IsProject { get; set; } = true;
    [Parameter] public bool IsBounce { get; set; } = true;


    public int BalanceFrom { get; set; } = 0;
    public int BalanceTo { get; set; } = 0;
    public const int Quantity = 6;
    List<PostDto> posts = new List<PostDto>();





    //[Parameter] public FilterViewModel Filter{ get; set; }
    //[Parameter] public EventCallback<FilterViewModel> FilterChanged { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        posts = await _postRepository.GetPostsAsync();
        BalanceFrom = 0;
        BalanceTo = posts.Count > Quantity ? Quantity : posts.Count;
    }

    private void BalancePost()
    {
        if (BalanceTo - BalanceFrom >= Quantity * 2)
        {
            BalanceFrom += Quantity;
        }
        BalanceTo = (BalanceTo + Quantity) > posts.Count ? posts.Count : (BalanceTo + Quantity);
    }


    private async Task PostAction(PostDto newPost)
    {
        posts = await _postRepository.GetPostsAsync();
        BalanceFrom = 0;
        BalanceTo = posts.Count > Quantity ? Quantity : posts.Count;

        await Send(newPost.Id);
    }






    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:44349/JolijoberHub/Notify").WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("OnNewPost", async (id) =>
        {
            posts =await _postRepository.GetPostsAsync();
            BalanceFrom = 0;
            BalanceTo = posts.Count > Quantity ? Quantity : posts.Count;
            
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send(string id) =>
      await hubConnection.InvokeAsync("NewPost", id);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }


}
